package anstjgp_0204;

public class Ex_0215 {

	public static void main(String[] args) {
		
		/* 추상클래스 : 추상메서드를 멤버로 가지는 클래스
		 * 추상메서드 : 선언부만 있고 구체적인 내용은 비워 놓은 메서드
		 *   abstract class 클래스명{
		 *            abstract void play(int pos);//추상메서드
		 *            abstract void stop();//추상메서드
		 *            
		 *            void disp(){}//일반메서드
		 *   }
		 * 인터페이스 : 객체 간 상호 작용을 위한 일종의 규약
		 *          클래스가 설계도라면 인터페이스는 설계할 때 필요한 목록을 써놓은 종이
		 *          인터페이스에 선언된 변수는 상수(public static final)
		 *          메서드는 모두 추상 메서드(abstract)
		 * - 인터페이스 간의 상속 extends
		 *   interface 인터페이스 이름{
		 *            상수;
		 *            추상메서드
		 *            static, 디폴트 메서드(jdk1.8)
		 *   }
		 *   ->제어자는 생략가능(컴파일러가 자동으로 제어자 추가)
		 * - 인터페이스의 다형성 : 특정한 인터페이스를 구현한 인스턴스는 해당 인터페이스 타입의 참조변수로
		 *                   참조가 가능
		 *      인터페이스명 참조변수 = new 클래스명();
		 * - 인터페이스의 장점 : 개발시간을 단축시킬 수 있다
		 *                  표준화가 가능하다
		 *                  서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다
		 *                  독립적인 프로그래밍이 가능하다
		 * - 디폴트 메서드와 static메서드(JDK1.8에 추가)
		 *   >디폴트 메서드 : 추상메서드의 기본적인 구현을 제공하는 메서드로,
		 *                추상메서드가 아니기 때문에 디폴트 메서드가 새로 추가되어도 해당 인터페이스를 
		 *                구현한 클래스를 변경하지 않아도 된다 
		 *   >static 메서드  
		 * 내부클래스 : 사용 빈도가 높지 않음 특징만 이해하기
		 * - 내부클래스의 장점 : 내부클래스에서 외부 클래스의 멤버들을 쉽게 접근 가능
		 *                  코드의 복잡성을 줄일 수 있음
		 * - 내부클래스의 종류 : 인스턴스 클래스
		 *                 -> 외부 클래스의 멤버변수 선언 위치에 선언하며,
		 *                    외부클래스의 인스턴스멤버처럼 다루어진다
		 *                  class OuterClass{
		 *                        class InnerClass{
		 *                        }
		 *                  }
		 *                  스태틱클래스
		 *                 -> 외부클래스의 멤버변수 선언 위치에 선언하며,
		 *                    외부클래스의 static멤버처럼 다루어진다
		 *                  class OuterClass{
		 *                        static class InnerClass{
		 *                        }
		 *                  }
		 *                  지역클래스
		 *                 -> 외부클래스의 메서드나 초기화 블럭안에 선언하며, 선언된 영역 내부에서만 
		 *                    사용 가능
		 *                  class OuterClass{
		 *                        void a(){
		 *                             class Inner(){}
		 *                        }
		 *                  }
		 *                  익명클래스(anonymous class)
		 *                  -> 클래스의 선언과 객체의 생성을 동시에 하는 이름없는 클래스(일회용)
		 *                  : 특이하게도 다른 내부클래스와 달리 이름이 없다
		 * 
		 */  
	}

}






